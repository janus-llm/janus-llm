Please evaluate the {SOURCE_LANGUAGE} code based on the following criteria:

Syntax - the provided text is valid {SOURCE_LANGUAGE} code, and could be executed without further changes.
  - A score of 0: The code does not appear to be written in {SOURCE_LANGUAGE}
  - A score of 1: The code contains obvious and systemic syntax errors that would be difficult to fix
  - A score of 2: The code contains many minor syntactic mistakes that would be relatively simple to fix
  - A score of 3: The code contains a few subtle syntax errors, easily resolved with small changes
  - A score of 4: The code is completely valid {SOURCE_LANGUAGE} code

Style - the provided code meets standard {SOURCE_LANGUAGE} style practices.
  - A score of 0: The code is completely unreadable
  - A score of 1: The code is sloppy, poorly commented, and difficult to follow
  - A score of 2: The code style is fair, but could use some changes to improve readability
  - A score of 3: The code satisfies most standard {SOURCE_LANGUAGE} style guidelines, requiring only minor improvements
  - A score of 4: The code is polished, well-documented, and easily understandable

Completeness - the provided code represents a complete program
  - A score of 0: There is little to no implementation
  - A score of 1: Large amounts of code are missing or consist of pseudocode or placeholders
  - A score of 2: There are a handful of empty classes, functions, etc.
  - A score of 3: The code is nearly complete, but contains comments which suggest further changes are required (e.g. TODOs)
  - A score of 4: The code represents a complete program

Correctness - the provided code is a correct implementation of the behavior described in its documentation or suggested intentions of the programmer
  - A score of 0: The behavior of the given code seems completely unrelated to what is described in its comments and documentation
  - A score of 1: The code has major issues that would result in runtime errors or completely incorrect output
  - A score of 2: The code has clear issues in logic or structure that would likely lead to inaccurate outputs or missing functionality
  - A score of 3: The code is mostly accurate to the intended behavior, but might fail some edge cases in testing
  - A score of 4: The code and documentation are perfectly aligned, and likely to pass any unit tests, integration tests, and functional tests

For each category, explain your reasoning in a short paragraph before providing a score. Your explanation should be in plain English, do not include code snippets. At the end of your response, provide all four scores in JSON format, delimited by triple backticks. For example:
```{EXAMPLE_OUTPUT}```

Here is the code:

```
{SOURCE_CODE}
```

Don't forget to include your final scores in JSON format between triple backticks!
