import argparse
import json
import re
from pathlib import Path

parser = argparse.ArgumentParser(
    prog="Mask MUMPS Comments",
    description="Replace MUMPS comments with numbers, to be used in MadLibs-style"
    " automatic documentation evaluation.",
)

parser.add_argument(
    "--input-comments-file",
    type=str,
    required=True,
    help="The .json file generated by `mask_mumps_comments.py`",
)

parser.add_argument(
    "--output-dir",
    type=str,
    required=True,
    help="The directory containing the generated .json files",
)

args = parser.parse_args()
input_file = Path(args.input_comments_file).expanduser()
output_dir = Path(args.output_dir).expanduser()

master_obj = json.loads(input_file.read_text())
for comment_file in output_dir.rglob("*.json"):
    key = comment_file.with_suffix(".m").name
    if key not in master_obj:
        print(f"Skipping file: {comment_file.name}")
        continue
    obj = json.loads(comment_file.read_text())

    master_obj[key]["comment_types"] = {
        k: v.lower()
        for v, k in re.findall(
            r"<(BLOCK|INLINE)_COMMENT (\w{8})>", master_obj[key]["processed"]
        )
    }

    valid_keys = set(master_obj[key]["comments"].keys())
    missing_keys = valid_keys.difference(obj.keys())
    invalid_keys = set(obj.keys()).difference(valid_keys)
    if missing_keys:
        print(f"{comment_file.name} missing keys: {missing_keys}")
    if invalid_keys:
        print(f"{comment_file.name} has invalid keys (skipping): {invalid_keys}")
    obj = {k: obj[k] for k in obj if k in valid_keys}
    master_obj[key]["generated_comments"] = obj


(output_dir / "processed.json").write_text(json.dumps(master_obj, indent=2))
