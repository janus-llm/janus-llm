janus.metrics.complexity_metrics
================================

.. py:module:: janus.metrics.complexity_metrics


Exceptions
----------

.. autoapisummary::

   janus.metrics.complexity_metrics.NodeException


Classes
-------

.. autoapisummary::

   janus.metrics.complexity_metrics.TreeSitterMetric


Functions
---------

.. autoapisummary::

   janus.metrics.complexity_metrics.cyclomatic_complexity
   janus.metrics.complexity_metrics.effort
   janus.metrics.complexity_metrics.volume
   janus.metrics.complexity_metrics.difficulty
   janus.metrics.complexity_metrics.maintainability


Module Contents
---------------

.. py:exception:: NodeException

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: TreeSitterMetric(code, language)

   A class for calculating node-based complexity metrics of code.

   :param code: The code to get metrics on
   :param language: The language the code is written in


   .. py:method:: get_cyclomatic_complexity()


   .. py:method:: get_lines_of_code()


   .. py:method:: get_program_vocabulary()


   .. py:method:: get_program_length()


   .. py:method:: get_volume()


   .. py:method:: get_difficulty()


   .. py:method:: get_effort()


   .. py:method:: get_time_to_program()


   .. py:method:: get_num_bugs()


   .. py:method:: get_maintainability()


.. py:function:: cyclomatic_complexity(target, **kwargs)

   Calculate the cyclomatic complexity score.

   :param target: The target text.

   :returns: The cyclomatic complexity.


.. py:function:: effort(target, **kwargs)

   Calculate the Halstead effort.

   :param target: The target text.

   :returns: The Halstead effort.


.. py:function:: volume(target, **kwargs)

   Calculate the Halstead volume.

   :param target: The target text.

   :returns: The Halstead volume.


.. py:function:: difficulty(target, **kwargs)

   Calculate the Halstead difficulty.

   :param target: The target text.

   :returns: The Halstead difficulty.


.. py:function:: maintainability(target, **kwargs)

   Calculate the maintainability score.

   :param target: The target text.

   :returns: The maintainability score.


