janus.utils.enums
=================

.. py:module:: janus.utils.enums


Attributes
----------

.. autoapisummary::

   janus.utils.enums.CUSTOM_SPLITTERS
   janus.utils.enums.LANGUAGES


Classes
-------

.. autoapisummary::

   janus.utils.enums.EmbeddingType


Module Contents
---------------

.. py:class:: EmbeddingType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: SOURCE
      :value: 1



   .. py:attribute:: REQUIREMENT
      :value: 2



   .. py:attribute:: SUMMARY
      :value: 3



   .. py:attribute:: PSEUDO
      :value: 4



   .. py:attribute:: TARGET
      :value: 5



.. py:data:: CUSTOM_SPLITTERS
   :type:  Set[str]

.. py:data:: LANGUAGES
   :type:  Dict[str, Dict[str, Any]]

