janus.converter.document
========================

.. py:module:: janus.converter.document


Attributes
----------

.. autoapisummary::

   janus.converter.document.log


Classes
-------

.. autoapisummary::

   janus.converter.document.Documenter
   janus.converter.document.MultiDocumenter
   janus.converter.document.MadLibsDocumenter


Module Contents
---------------

.. py:data:: log

.. py:class:: Documenter(source_language = 'fortran', drop_comments = True, **kwargs)

   Bases: :py:obj:`janus.converter.converter.Converter`


   Parent class that converts code into something else.

   Children will determine what the code gets converted into. Whether that's translated
   into another language, into pseudocode, requirements, documentation, etc., or
   converted into embeddings

   Initialize a Converter instance.

   :param source_language: The source programming language.
   :param parser_type: The type of parser to use for parsing the LLM output. Valid
                       values are `"code"`, `"text"`, `"eval"`, and `None` (default). If `None`,
                       the `Converter` assumes you won't be parsing an output (i.e., adding to an
                       embedding DB).


.. py:class:: MultiDocumenter(**kwargs)

   Bases: :py:obj:`Documenter`


   Parent class that converts code into something else.

   Children will determine what the code gets converted into. Whether that's translated
   into another language, into pseudocode, requirements, documentation, etc., or
   converted into embeddings

   Initialize a Converter instance.

   :param source_language: The source programming language.
   :param parser_type: The type of parser to use for parsing the LLM output. Valid
                       values are `"code"`, `"text"`, `"eval"`, and `None` (default). If `None`,
                       the `Converter` assumes you won't be parsing an output (i.e., adding to an
                       embedding DB).


.. py:class:: MadLibsDocumenter(comments_per_request = None, **kwargs)

   Bases: :py:obj:`Documenter`


   Parent class that converts code into something else.

   Children will determine what the code gets converted into. Whether that's translated
   into another language, into pseudocode, requirements, documentation, etc., or
   converted into embeddings

   Initialize a Converter instance.

   :param source_language: The source programming language.
   :param parser_type: The type of parser to use for parsing the LLM output. Valid
                       values are `"code"`, `"text"`, `"eval"`, and `None` (default). If `None`,
                       the `Converter` assumes you won't be parsing an output (i.e., adding to an
                       embedding DB).


