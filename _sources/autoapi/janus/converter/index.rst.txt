:py:mod:`janus.converter`
=========================

.. py:module:: janus.converter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   janus.converter.Converter



Functions
~~~~~~~~~

.. autoapisummary::

   janus.converter.run_if_changed



Attributes
~~~~~~~~~~

.. autoapisummary::

   janus.converter.log


.. py:data:: log
   

   

.. py:function:: run_if_changed(*tracked_vars)

   Wrapper to skip function calls if the given instance attributes haven't
   been updated. Requires the _changed_attrs set to exist, and the __setattr__
   method to be overridden to track parameter updates in _changed_attrs.


.. py:class:: Converter(source_language = 'fortran', max_tokens = None)

   Parent class that converts code into something else.

   Children will determine what the code gets converted into. Whether that's translated
   into another language, into pseudocode, requirements, documentation, etc., or
   converted into embeddings

   Initialize a Converter instance.

   :param source_language: The source programming language.
   :param parser_type: The type of parser to use for parsing the LLM output. Valid
                       values are `"code"`, `"text"`, `"eval"`, and `None` (default). If `None`,
                       the `Converter` assumes you won't be parsing an output (i.e., adding to an
                       embedding DB).

   .. py:method:: set_source_language(source_language)

      Validate and set the source language.

      The affected objects will not be updated until translate() is called.

      :param source_language: The source programming language.



