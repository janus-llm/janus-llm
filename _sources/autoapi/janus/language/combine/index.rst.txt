:py:mod:`janus.language.combine`
================================

.. py:module:: janus.language.combine


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   janus.language.combine.Combiner




Attributes
~~~~~~~~~~

.. autoapisummary::

   janus.language.combine.log


.. py:data:: log

   

.. py:class:: Combiner(language = 'python')


   Bases: :py:obj:`janus.language.file.FileManager`

   Combine files that have been split into functional blocks back into
   a single file.

   Initialize a FileManager instance.

   :param language: The name of the language to manage.

   .. py:method:: combine(block)
      :staticmethod:

      Combine the given block with its children.

      :param block: The functional code block to combine with its children.


   .. py:method:: combine_children(block)
      :staticmethod:

      Recursively combine block code with children code.

      :param block: The functional code block to recursively replace children.


   .. py:method:: contains_child(code, child)
      :staticmethod:

      Determine whether the given code contains a placeholder for the given
      child block.

      :param code: The code to check for the placeholder
      :param child: The child block to check for

      :returns: Whether the given code contains a placeholder for the given child
                block.


   .. py:method:: count_missing(input_block, output_code)
      :staticmethod:

      Return the number of children of input_block who are not represented
      in output_code with a placeholder

      :param input_block: The block to check for missing children
      :param output_code: The code to check for placeholders

      :returns: The number of children of input_block who are not represented in
                output_code with a placeholder



