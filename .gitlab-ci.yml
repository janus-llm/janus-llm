image: "python:3.11"

before_script:
  - curl -ksSL https://gitlab.mitre.org/mitre-scripts/mitre-pki/raw/master/os_scripts/install_certs.sh | sh
  - python --version
  - apt update -y
  - apt install -y pipx
  - pipx install poetry
  - pipx ensurepath
  - export PATH=$PATH:$HOME/.local/bin
  - poetry --version

.install_dev:
  script:
    - poetry install --without docs --all-extras

stages:
  - Static Analysis
  - Security
  - Documentation
  - Release
  - Tests
  - Dummy

###################
# Static Analysis #
###################
flake8:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run flake8 --config=.flake8 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock
      - .flake8

black:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run black --check --config pyproject.toml ./
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

isort:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run isort --check --profile black --trailing-comma -m=3 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

############
# Security #
############
bandit:
  stage: Security
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run bandit -c pyproject.toml -r .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock


##############
# Unit Tests #
##############
coverage:
  stage: Tests
  tags:
    - docker
  variables:
    GIT_SSL_NO_VERIFY: '1'
    "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
    "SSL_CERT_FILE": "/etc/ssl/certs/ca-certificates.crt"
    "NODE_EXTRA_CA_CERTS": "/etc/ssl/certs/ca-certificates.crt"
  script:
    - poetry install --with coverage --all-extras
    - poetry run python -m coverage run -m pytest -v -m translate janus
    - poetry run python -m coverage report -i
    - poetry run python -m coverage xml -i
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  needs: []
  timeout: 20m
  only:
    refs:
      - merge_requests
      - main
    changes:
      - "**/*.py"
      - poetry.lock


################
# GitLab Pages #
################
.pages:
  script:
    - poetry install --only docs
    - poetry run sphinx-build -d docs/build/doctrees docs/source docs/build/html
    - mv docs/build/html public/

test-pages:
  stage: Documentation
  tags:
    - docker
  extends: .pages
  needs: []
  artifacts:
    expose_as: 'HTML Documentation'
    paths:
      - public/
    expire_in: 1 week
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - docs/**/*
      - poetry.lock
      - pyproject.toml
      - README.md

pages:
  stage: Documentation
  tags:
    - docker
  extends: .pages
  artifacts:
    paths:
      - public
  only:
    - tags

###########################
# Packaging and Releasing #
###########################
test-release:
  stage: Release
  tags:
    - docker
  script:
    - poetry build
    - poetry run pip install -U dist/*.whl
    # Remove the directory so that it's not using the directory to run the code and it uses the installed package
    - rm -rf janus
    - poetry run python tests/package.py
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock
      - pyproject.toml

bump-version:
  stage: Release
  variables:
    VERSION_FILE: "${CI_PROJECT_DIR}/pyproject.toml"
    INIT_FILE: "${CI_PROJECT_DIR}/janus/__init__.py"
  script:
    - git checkout main
    - echo "Checking the author of the last commit"
    - LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
    - if [ "${LAST_COMMIT_AUTHOR}" == "${JANUS_CI_BOT_NAME}" ]; then
        echo "Last commit was made by CI job. Skipping version bump.";
        exit 0;
      fi
    - echo "Checking for version bump type in commit message"
    - COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    - echo "Commit message ${COMMIT_MESSAGE}"
    - >
      if [[ "${COMMIT_MESSAGE}" == *"[MAJOR]"* ]]; then
        BUMP_TYPE="major"
      elif [[ "${COMMIT_MESSAGE}" == *"[MINOR]"* ]]; then
        BUMP_TYPE="minor"
      elif [[ "${COMMIT_MESSAGE}" == *"[PATCH]"* ]]; then
        BUMP_TYPE="patch"
      else
        echo "No version bump keyword found in commit message. Skipping version bump."
        exit 0
      fi
    - echo "Bumping version ${BUMP_TYPE}"
    - poetry version ${BUMP_TYPE}
    - NEW_VERSION=$(poetry version -s)
    - echo "Updating __version__ in ${INIT_FILE}"
    - sed -i.bak 's/__version__ = .*/__version__ = "'${NEW_VERSION}'"/' ${INIT_FILE}
    - rm ${INIT_FILE}.bak  # Clean up the backup file created by sed
    - git remote remove origin
    - git remote add origin https://oauth2:${CI_TAG_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git config --global user.email "${JANUS_CI_BOT_USER}@mitre.org"
    - git config --global user.name "${JANUS_CI_BOT_NAME}"
    - git add ${VERSION_FILE} ${INIT_FILE}
    - git commit -m "Bump version to ${NEW_VERSION}"
    - git tag "v${NEW_VERSION}"
    - git push origin main --tags  # Pushes both the commit and the tags
  needs: []
  only:
    - main

release_gitlab:
  stage: Release
  tags:
    - docker
  script:
    - poetry build
    - poetry config repositories.mitre-gitlab https://gitlab.mitre.org/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish --repository mitre-gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}
  only:
    - tags

release_artifactory:
  stage: Release
  tags:
    - docker
  script:
    - poetry build
    - poetry config repositories.mitre-artifactory https://artifacts.mitre.org/artifactory/api/pypi/python
    - poetry publish --repository mitre-artifactory -u ${JANUS_CI_BOT_USER} -p ${JANUS_CI_BOT_ARTIFACT_TOKEN}
  only:
    - tags


#########
# Dummy #
#########
dummy-job:
  stage: Dummy
  tags:
    - docker
  script:
    - echo "Dummy CI Job"
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - .github/workflows/**/*
      - .gitlab-ci.yml
      - janus/prompts/templates/**/*
      - "**/*.md"
