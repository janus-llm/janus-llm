image: "python:3.10"

before_script:
  - python --version
  - curl -sSkL https://install.python-poetry.org | python -
  - export PATH=$PATH:$HOME/.local/bin
  - poetry --version
  - DEBIAN_FRONTEND=noninteractive apt update
  - DEBIAN_FRONTEND=noninteractive apt -y install libgl1-mesa-dev

.install_dev:
  script:
    - poetry install --without docs

stages:
  - Static Analysis
  - Documentation
  - Release
  - Tests

###################
# Static Analysis #
###################
flake8:
  stage: Static Analysis
  tags:
    - lslab
  script:
    - poetry install --only dev
    - poetry run flake8 --config=.flake8 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock
      - .flake8

black:
  stage: Static Analysis
  tags:
    - lslab
  script:
    - poetry install --only dev
    - poetry run black --check ./
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

isort:
  stage: Static Analysis
  tags:
    - lslab
  script:
    - poetry install --only dev
    - poetry run isort --check --trailing-comma -m=3 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

##############
# Unit Tests #
##############
coverage:
  stage: Tests
  tags:
  - lslab
  script:
    - poetry install --with coverage
    - poetry run python -m coverage run -m pytest janus
    - poetry run python -m coverage report -i
    - poetry run python -m coverage xml -i
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  needs: []
  timeout: 20m
  only:
    refs:
      - merge_requests
      - main
    changes:
      - "**/*.py"
      - poetry.lock


################
# GitLab Pages #
################
.pages:
  script:
    - poetry install --only docs
    - poetry run sphinx-build -d docs/build/doctrees docs/source docs/build/html
    - mv docs/build/html public/

test-pages:
  stage: Documentation
  tags:
    - lslab
  extends: .pages
  needs: []
  artifacts:
    expose_as: 'HTML Documentation'
    paths:
      - public/
    expire_in: 1 week
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - docs/**/*
      - poetry.lock

pages:
  stage: Documentation
  tags:
    - lslab
  extends: .pages
  artifacts:
    paths:
      - public
  only:
    - tags

###########################
# Packaging and Releasing #
###########################
.check_version_and_commit:
  script:
    - POETRY_VERSION=$(poetry version -s)
    - >
      if [ $POETRY_VERSION != $CI_COMMIT_TAG ]; then
        VERSION=$CI_COMMIT_TAG
        poetry version $VERSION
        git remote remove origin
        git remote add origin https://oauth2:${CI_TAG_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
        git config --global user.email "janus-ci-bot@mitre.org"
        git config --global user.name "Janus CI Bot"
        git add pyproject.toml
        git commit -m "Change pyproject.toml version to $VERSION"
        git push -o ci.skip origin HEAD:main
      fi

test-release:
  stage: Release
  tags:
    - lslab
  script:
    - poetry build
    - poetry run pip install -U dist/*.whl
    # Remove the directory so that it's not using the directory to run the code and it uses the installed package
    - rm -rf janus
    - poetry run python tests/package.py
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

release-artifactory:
  stage: Release
  tags:
    - lslab
  script:
    - !reference [.check_version_and_commit, script]
    - poetry build
    - poetry config repositories.mitre-artifactory https://artifacts.mitre.org/artifactory/api/pypi/python
    - poetry publish --repository mitre-artifactory -u janus-ci-bot -p ${CI_ARTIFACTORY_TOKEN}
  only:
    - tags
