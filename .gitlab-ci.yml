image: "python:3.11"

before_script:
  - curl -ksSL https://gitlab.mitre.org/mitre-scripts/mitre-pki/raw/master/os_scripts/install_certs.sh | sh
  - python --version
  - curl -sSkL https://install.python-poetry.org | python -
  - export PATH=$PATH:$HOME/.local/bin
  - poetry --version

.install_dev:
  script:
    - poetry install --without docs

stages:
  - Static Analysis
  - Security
  - Documentation
  - Release
  - Tests
  - Dummy

###################
# Static Analysis #
###################
flake8:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run flake8 --config=.flake8 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock
      - .flake8

black:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run black --check --config pyproject.toml ./
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

isort:
  stage: Static Analysis
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run isort --check --profile black --trailing-comma -m=3 .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock

############
# Security #
############
bandit:
  stage: Security
  tags:
    - docker
  script:
    - poetry install --only dev
    - poetry run bandit -c pyproject.toml -r .
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock


##############
# Unit Tests #
##############
coverage:
  stage: Tests
  tags:
    - docker
  variables:
    GIT_SSL_NO_VERIFY: '1'
    "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
    "SSL_CERT_FILE": "/etc/ssl/certs/ca-certificates.crt"
    "NODE_EXTRA_CA_CERTS": "/etc/ssl/certs/ca-certificates.crt"
  script:
    - poetry install --with coverage
    - poetry run python -m coverage run -m pytest -v -m translate janus
    - poetry run python -m coverage report -i
    - poetry run python -m coverage xml -i
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  needs: []
  timeout: 20m
  only:
    refs:
      - merge_requests
      - main
    changes:
      - "**/*.py"
      - poetry.lock


################
# GitLab Pages #
################
.pages:
  script:
    - poetry install --only docs
    - poetry run sphinx-build -d docs/build/doctrees docs/source docs/build/html
    - mv docs/build/html public/

test-pages:
  stage: Documentation
  tags:
    - docker
  extends: .pages
  needs: []
  artifacts:
    expose_as: 'HTML Documentation'
    paths:
      - public/
    expire_in: 1 week
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - docs/**/*
      - poetry.lock
      - pyproject.toml
      - README.md

pages:
  stage: Documentation
  tags:
    - docker
  extends: .pages
  artifacts:
    paths:
      - public
  only:
    - tags

###########################
# Packaging and Releasing #
###########################
test-release:
  stage: Release
  tags:
    - docker
  script:
    - poetry build
    - poetry run pip install -U dist/*.whl
    # Remove the directory so that it's not using the directory to run the code and it uses the installed package
    - rm -rf janus
    - poetry run python tests/package.py
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.py"
      - poetry.lock
      - pyproject.toml

#########
# Dummy #
#########
dummy-workflow:
  stage: Dummy
  tags:
    - docker
  script:
    - echo "Dummy CI Job"
  needs: []
  only:
    refs:
      - merge_requests
    changes:
      - .github/workflows/**/*
